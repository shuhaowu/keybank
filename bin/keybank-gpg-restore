#!/bin/bash

if [ "$(whoami)" != "root" ]; then
  echo "ERROR: must be root to run this" >&2
  exit 1
fi

umask 0077

usage() {
  echo "usage: keybank-gpg-restore name path-to-gnupg-parentdir" >&2
  echo "" >&2
  echo "restores gpg directories in here into the computer without the" >&2
  echo "secret master key" >&2
  echo "" >&2
  echo "positional arguments:" >&2
  echo "  name: the gpg directories here should be stored with the format of" >&2
  echo "        gnupg-<name>-master. This argument is that name." >&2
  echo "  path-to-gnupg-parentdir: the path to the parent directory of .gnupg" >&2
  echo "                           usually /home/<username>" >&2
  exit 1
}

export_subkeys() {
  t=$1
  export GNUPGHOME=$(pwd)/gnupg-$t-master
  master_keyid=$(gpg -k | grep pub | awk '{print $2}' | cut -f 2 -d "/")
  export_dir=$(pwd)/gnupg-$t

  gpg --output subkeys --export-options export-reset-subkey-passwd --export-secret-subkeys $master_keyid

  mkdir -p $export_dir
  gpg --homedir=$export_dir --import subkeys

  shred --remove subkeys

  gpg --homedir=$export_dir -K
}

restore_subkeys() {
  dir_on_keybank=$(pwd)/gnupg-$1
  user_homedir=$2

  cp -r $dir_on_keybank $user_homedir
  mv $user_homedir/gnupg-$1 $user_homedir/.gnupg

  pushd $dir_on_keybank
    shred --remove *
  popd

  rmdir $dir_on_keybank
}

if [ ! -d gnupg-$1-master ]; then
  echo "ERROR: gnupg-$1-master does not exist here" >&2
  usage
fi

if [ ! -d $2 ]; then
  echo "ERROR: $2 does not exist here" >&2
  usage
fi

set -xe

export_subkeys $1
restore_subkeys $1 $2

export GNUPGHOME=

echo "Complete! May need to chown the $2/.gnupg, tho"

